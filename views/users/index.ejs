<%- include('../layouts/header', {path: '/users'}) %>
<script src="/js/notifications.js"></script>
<div class="container mt-4">
    <h1>User Management</h1>
    
    <!-- Add User Form -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title mb-3">Add New User</h5>
            <form action="/users" method="POST">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="name" required minlength="2" maxlength="255">
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" name="password" required minlength="6">
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" name="role" required>
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                        </select>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary">Add User</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Users List -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Users</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                        <tr>
                            <td><%= user.name %></td>
                            <td><%= user.email %></td>
                            <td>
                                <span class="badge bg-<%= user.role === 'admin' ? 'danger' : 'info' %>">
                                    <%= user.role %>
                                </span>
                            </td>
                            <td><%= new Date(user.created_at).toLocaleDateString('vi-VN') %></td>
                            <td>
                                <button class="btn btn-sm btn-warning" onclick="editUser(<%= JSON.stringify(user) %>)">Edit</button>
                                
                                <button class="btn btn-sm btn-info" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#resetPasswordModal"
                                        onclick="setResetPasswordUserId(<%= user.id %>, '<%= user.name %>')">
                                    Reset Password
                                </button>

                                <form action="/users/<%= user.id %>?_method=DELETE" method="POST" style="display: inline;">
                                    <button type="submit" class="btn btn-sm btn-danger" 
                                            onclick="return confirm('Are you sure you want to delete this user?')">
                                        Delete
                                    </button>
                                </form>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        <i class="bi bi-bell me-2"></i>Notification Settings
                    </h5>
                    <form id="notificationSettingsForm">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Daily Reminder Time</label>
                                <input type="time" 
                                       class="form-control" 
                                       id="notificationTime" 
                                       required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Notification Title</label>
                                <input type="text"
                                       class="form-control"
                                       id="notificationTitle"
                                       required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label class="form-label">Notification Message</label>
                                <textarea class="form-control"
                                         id="notificationBody"
                                         rows="2"
                                         required></textarea>
                            </div>
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save me-1"></i>Save
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="resetPasswordForm" method="POST">
                <div class="modal-body">
                    <p>Reset password for <strong id="resetPasswordUserName"></strong></p>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" name="password" required minlength="6">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Reset Password</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
function editUser(user) {
    // Populate the form with user data
    const form = document.querySelector('form[action="/users"]');
    form.action = `/users/${user.id}?_method=PUT`;
    
    form.querySelector('input[name="name"]').value = user.name;
    form.querySelector('input[name="email"]').value = user.email;
    
    // Remove password field when editing
    const passwordField = form.querySelector('input[name="password"]');
    const passwordContainer = passwordField.closest('.mb-3');
    passwordContainer.style.display = 'none';
    passwordField.removeAttribute('required');
    
    // Set role
    form.querySelector('select[name="role"]').value = user.role;
    
    // Update button text
    form.querySelector('button[type="submit"]').textContent = 'Update User';
    
    // Add a cancel button if it doesn't exist
    if (!document.getElementById('cancelEditBtn')) {
        const cancelBtn = document.createElement('button');
        cancelBtn.type = 'button';
        cancelBtn.id = 'cancelEditBtn';
        cancelBtn.className = 'btn btn-secondary ms-2';
        cancelBtn.textContent = 'Cancel';
        cancelBtn.onclick = resetForm;
        form.querySelector('button[type="submit"]').after(cancelBtn);
    }
}

function resetForm() {
    const form = document.querySelector('form[action^="/users"]');
    form.reset();
    form.action = '/users';
    
    // Show password field again
    const passwordField = form.querySelector('input[name="password"]');
    const passwordContainer = passwordField.closest('.mb-3');
    passwordContainer.style.display = '';
    passwordField.setAttribute('required', '');
    
    // Update button text
    form.querySelector('button[type="submit"]').textContent = 'Add User';
    
    // Remove cancel button
    const cancelBtn = document.getElementById('cancelEditBtn');
    if (cancelBtn) cancelBtn.remove();
}

function setResetPasswordUserId(userId, userName) {
    const form = document.getElementById('resetPasswordForm');
    form.action = `/users/${userId}/reset-password`;
    document.getElementById('resetPasswordUserName').textContent = userName;
}

// Load notification time
async function loadNotificationTime() {
    try {
        const response = await fetch('/users/settings/notification-time');
        const data = await response.json();
        if (data.success) {
            document.getElementById('notificationTime').value = data.time;
        }
    } catch (error) {
        console.error('Error loading notification time:', error);
    }
}

// Load notification content
async function loadNotificationContent() {
    try {
        const response = await fetch('/users/settings/notification-content');
        const data = await response.json();
        if (data.success) {
            document.getElementById('notificationTitle').value = data.content.title;
            document.getElementById('notificationBody').value = data.content.body;
        }
    } catch (error) {
        console.error('Error loading notification content:', error);
    }
}

// Handle notification settings form
document.getElementById('notificationSettingsForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const time = document.getElementById('notificationTime').value;
    const title = document.getElementById('notificationTitle').value;
    const body = document.getElementById('notificationBody').value;

    // Update notification time
    const timeSuccess = await scheduleOrderNotification(time);
    
    // Update notification content
    const contentSuccess = await updateNotificationContent(title, body);

    if (timeSuccess && contentSuccess) {
        alert('Notification settings updated successfully');
    } else {
        alert('Failed to update some notification settings');
    }
});

// Load notification time when page loads
loadNotificationTime();
loadNotificationContent();
</script>

<%- include('../layouts/footer') %> 